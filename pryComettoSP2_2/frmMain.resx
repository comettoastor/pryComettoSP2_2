<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>